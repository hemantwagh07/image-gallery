{"version":3,"sources":["Components/Card/card.js","Components/CardList/photographerList.js","Components/CardList/photoList.js","Components/CardList/albumList.js","App.js","serviceWorker.js","index.js"],"names":["Card","cardId","cardTitle","cardImage","cardBody","className","alt","src","photographerList","componentDidMount","axios","get","then","response","setState","photographers","data","catch","error","console","log","state","this","map","photographer","to","id","key","name","username","email","Component","photoList","props","match","params","photos","photo","title","thumbnailUrl","albumList","albums","album","App","searchField","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8d2d70ec.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Card({ cardId, cardTitle, cardImage, cardBody }) {\r\n    return (\r\n        <div className=\"col-auto mb-3\">\r\n            <div className=\"card\">\r\n                <img className=\"card-img-top\" alt={cardId} src={cardImage} />\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{cardTitle}</h5>\r\n                    <p className=\"card-text\">{cardBody}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport Card from '../Card/card'\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class photographerList extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            photographers: []\r\n        }\r\n    }\r\n    componentDidMount = () => {\r\n        axios.get('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => {\r\n                // handle success\r\n                //console.log(response.data);\r\n                this.setState({ photographers: response.data });\r\n                //this.getproducts('', response.data[0].id)\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            .then(function () {\r\n                // always executed\r\n            });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container mt-5\">\r\n                <h3>List of Photographer</h3>\r\n                <p className=\"mb-4\">Click on any to see related albums</p>\r\n                <div className=\"row\">\r\n                    {\r\n                        this.state.photographers.map((photographer) => (\r\n                            <Link to={'/photographers/albums/' + photographer.id} key={photographer.id}>\r\n                                <Card key={photographer.id}\r\n                                    cardId={photographer.id}\r\n                                    cardTitle={photographer.name}\r\n                                    cardImage={`https://robohash.org/${photographer.username}.png?size=180x180&set=set5`}\r\n                                    cardBody={`Email : ${photographer.email}`}\r\n                                />\r\n                            </Link>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport React, { Component } from 'react'\r\nimport Card from '../Card/card';\r\n\r\nexport default class photoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            photos: []\r\n        }\r\n    }\r\n    componentDidMount = () => {\r\n        axios.get(`https://jsonplaceholder.typicode.com/photos?albumId=${this.props.match.params.id}`)\r\n            .then(response => {\r\n                // handle success\r\n                console.log(response.data);\r\n                this.setState({ photos: response.data });\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            .then(function () {\r\n                // always executed\r\n            });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row\">\r\n                    {\r\n                        this.state.photos.map((photo) => (\r\n                            <Card key={photo.id}\r\n                                cardId={photo.id}\r\n                                cardTitle={photo.title}\r\n                                cardImage={photo.thumbnailUrl}\r\n                                cardBody=''\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport Card from '../Card/card';\r\n\r\nexport default class albumList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            albums: []\r\n        }\r\n    }\r\n    componentDidMount = () => {\r\n        axios.get(`https://jsonplaceholder.typicode.com/albums?userId=${this.props.match.params.id}`)\r\n            .then(response => {\r\n                // handle success\r\n                this.setState({ albums: response.data });\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            .then(function () {\r\n                // always executed\r\n            });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container mt-5\">\r\n                <h3>List of albums by a photographer</h3>\r\n                <p className=\"mb-4\">Click on album to see photos inside it.</p>\r\n                <div className=\"row\">\r\n                    {\r\n                        this.state.albums.map((album) => (\r\n                            <Link to={'/albums/photos/' + album.id} key={album.id}>\r\n                                <Card key={album.id}\r\n                                    cardId={album.id}\r\n                                    cardTitle={album.title}\r\n                                    cardImage={`https://robohash.org/${album.title}.png?size=180x180&set=set4`}\r\n                                    cardBody=''\r\n                                />\r\n                            </Link>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport photographerList from './Components/CardList/photographerList';\nimport photoList from './Components/CardList/photoList';\nimport albumList from './Components/CardList/albumList';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      photographers: [],\n      searchField: ''\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Router>\n          <Switch>\n            <Route exact path='/' component={photographerList} />\n            <Route path='/photographers/albums/:id' component={albumList} />\n            <Route path='/albums/photos/:id' component={photoList} />\n          </Switch>\n        </Router>\n        {/* <CardList photographers={this.state.photographers} /> */}\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}